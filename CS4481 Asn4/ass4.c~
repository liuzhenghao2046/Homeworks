#include <stdlib.h>
#include <string.h>
#include "libpnm.h"

#define _THIS -1
#define _WW    0				// enumerate compass directions
#define _W     1
#define _NW    2
#define _N     3
#define _NE    4
#define _NN    5
#define _NNE   6

int debug=0;				// !=0  will show debug printf's
int dx=98, dy=55;			// debugging coordinates to concentrate on




enum compass {WW=_WW, W=_W, NW=_NW, N=_N, NE=_NE, NN=_NN, NNE=_NNE};	// 0..6


// This is used to compare the decoded output with the real file.
struct	PGM_Image pgmImageDEBUG;	// PGM image a 1 byte greyscale image 0=Black, 255=White.






//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

int getcolor(struct PGM_Image * pgmImage, int x, int y, int dir)		// given x,y, and compass direction,
{	
		int xx, yy;
		xx=x; yy=y;
		// ..   return real color, -1, -2 if out of bounds
		if ((x < 0) || (x >= pgmImage->width) ||							// out of bounds... test 1
				(y < 0) || (y >= pgmImage->height))		return -1;				// ...return -1 (should never happen)
				
				if (dir == _THIS) return pgmImage->image[y][x];						// just want exact pixel, no neighborhood stuff
						
						// === Deal with boundary constraints ===
						if ((x|y) == 0)	 return 128;										// first row and first column is always 128
								
								while (1)															// I did it this way for 'readability'
								{
										if ( y == 0)					{ x--; dir=_THIS; break; }			// remainder of first row is West
												if ( y == 1)					{ y--; dir=_THIS; break; }			// second row is always North
														if (x  <= 1)					{ y--; dir=_THIS; break; }			// left two columns are always North
																if ( 1 == (pgmImage->width-x)){ y--; dir=_THIS; break; }			// right most column is always North
																		break;
								}
								
								switch (dir)														// adjust for compass directions
								{	
										case WW:	x-=2;       break;
										case W:		x-=1;       break;
										case NW:	x-=1; y-=1; break;
										case N:		      y-=1; break;
										case NE:	x+=1; y-=1; break;
										case NN:		  y-=2; break;
										case NNE:	x+=1; y-=2; break;
								}
								
								if ((x < 0) || (x >= pgmImage->width) ||							// out of bounds...second test...just in case
										(y < 0) || (y >= pgmImage->height))		return -2;				// ...return -2 (should never happen)
										
										return pgmImage->image[y][x];
}








//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

int CALIC_CONTINUOUS_TONE1(struct PGM_Image * pgmImage, int x, int y)			// === CALIC CONTINUOUS-TONE ===
{
		int t;			// temp														// === CALIC Continuous global vars ===
		int	dh, dv;																	// Initial Gradient calculations
		
		// Calc Horizontal gradient
		dh = abs(getcolor(pgmImage, x, y, _W ) - getcolor(pgmImage, x, y, _WW)) +	// |W  - WW| +
		abs(getcolor(pgmImage, x, y, _N ) - getcolor(pgmImage, x, y, _NW)) +	// |N  - NW| +		
		abs(getcolor(pgmImage, x, y, _NE) - getcolor(pgmImage, x, y, _N ));	// |NE - N |
		
		// Calc Vertical gradient
		dv = abs(getcolor(pgmImage, x, y, _W ) - getcolor(pgmImage, x, y, _NW)) +	// |W  - NW| +
		abs(getcolor(pgmImage, x, y, _N ) - getcolor(pgmImage, x, y, _NN)) +	// |N  - NN| +		
		abs(getcolor(pgmImage, x, y, _NE) - getcolor(pgmImage, x, y,_NNE));	// |NE -NNE|
		
		if ((dv - dh) > 80)	return getcolor(pgmImage, x, y, _W);					// sharp horiz edge: W
				if ((dh - dv) > 80)	return getcolor(pgmImage, x, y, _N);					// sharp vert  edge: N
						
						t=(getcolor(pgmImage, x, y, _W ) + getcolor(pgmImage, x, y, _N )) / 2 +		// temp calc: (W + N)/2 +
						(getcolor(pgmImage, x, y, _NE) - getcolor(pgmImage, x, y, _NW)) / 4; 		//			 	        (NE - NW)/4
						
						if ((dv - dh) > 32) return (  t + getcolor(pgmImage, x, y, _W)) / 2; 		//      Horiz edge: ( temp + W)/2 
								if ((dh - dv) > 32) return (  t + getcolor(pgmImage, x, y, _N)) / 2; 		//      Vert  edge: ( temp + N)/2
										if ((dv - dh) >  8) return (3*t + getcolor(pgmImage, x, y, _W)) / 4; 		// weak Horiz edge: (3temp + W)/4
												if ((dh - dv) >  8) return (3*t + getcolor(pgmImage, x, y, _N)) / 4; 		// weak Vert  edge: (3temp + N)/4
														
														return t;
}




//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

int CALIC_CONTINUOUS_TONE(struct PGM_Image * pgmImage, int x, int y)	// wrapper for the real function (above), so we can see the return prediction
{
		int i= CALIC_CONTINUOUS_TONE1(pgmImage, x, y);
		return (i & 255);
}




//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

int CALIC1(struct PGM_Image * pgmImage, int x, int y, int ternary)		// given x,y, perform CALIC-Binary DISTINCT test
{																		// and if Binary, return that code...else
int i,j;		// ..set some global vars							// else in Continuous-tone mode...return that prediction
enum compass c;	// convert up to 7 pixel colors into an array		// And if first time in continuous-tone, output OR 256 as a signal

// === CALIC Binary global vars ===
int		dvt[7];														// Distinct Value Test (dvt) when in binary mode
int		dvtc=0;														// Distinct Value Test Count.  0,1,2,3,4,5,6,7
// .. 1,2 = binary mode,  0,3,4,5,6,7 = continuous-tone mode

int		s1=-1, s2=-1;												// unique values for binary encoding...and invalid to start

for (c=WW; c<=NNE; c++)												// Get the neighborhood: WW, W, NW, N, NE, NN, NNE
		dvt[c] = getcolor(pgmImage, x, y, c);
// eliminate duplicate colors
for (i = 0; i <=6; i++)												// loop 0...6
		for (j = i+1; j<=6; j++)											// loop from above+1 to 6
				if (dvt[i] == dvt[j]) dvt[j] = -1;								// invalidate duplicate pixel colors
						
						
						// find and count the unique pixel values
						dvtc = 0;															// distince value test count: unique pixel value count
						for (i = 6; i >=0; i--)												// count unique pixel colors.  They are what remains.
								if (dvt[i] >=0)
								{
										s2 = s1;														// save first into the second one
										s1 = dvt[i];													// save the new first one
										dvtc++;															// how many were unique colors: 0, 1, 2...7
								}
								
								if (s1 == -1) s1= s2;
								if (getcolor(pgmImage, x, y, _W) != s1)								// I want S1 to be W color.. if possible
								{ i=s1; s1=s2; s2=i;}												// S2 cannot be W if only one or two colors in neighborhood
								
								if (ternary == -999999999)											// if encoding...then  (ternary code does not apply here)
								{			
										if ((dvtc == 1) || (dvtc == 2))									// neighborhood has two colors: maybe in binary mode
										{
												
												if (getcolor(pgmImage, x, y, _THIS)==s1)					// current pixel IS W, emit a 0
														return 0 + 512; 											// bit 8 signals in Binary mode, bits 16..23 is the color
														if (getcolor(pgmImage, x, y, _THIS)==s2)					// current pixel IS the other color, emit a 1															
																return 1 + 512;											// current pixel not equal to W, however, it is the other
																
																// here:neighborhood has one or two distinct HOWEVER, it is not binary
																// Must switch to Continuous-tone..even though possibly in it already.
																return CALIC_CONTINUOUS_TONE(pgmImage, x, y) | 1024;		// === Signal switch Binary to Continuous=== 
										}
										
										return CALIC_CONTINUOUS_TONE(pgmImage, x, y);					// === Not Binary === 
								}// encoding not past here
								
								
								// decoding for CALIC...
								if ((dvtc == 1) || (dvtc == 2))
								{
										if (ternary==2) return CALIC_CONTINUOUS_TONE(pgmImage, x, y) | 1024; // 1 or 2 distinct & stream == 2 :: continuous tone
												
												if (ternary==0) return s1 + 512;									// 0 = S1 :: binary mode
														if (ternary==1) return s2 + 512;									// 1 = S2 :: binary mode
								}
								
								return CALIC_CONTINUOUS_TONE(pgmImage, x, y);						// === Not Binary === get the predicted error
}




//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

int CALIC(struct PGM_Image * pgmImage, int x, int y, int ternary)		// wrapper for the real function (above), so we can see the return prediction
{
		
		int i = CALIC1( pgmImage,  x, y, ternary);
		
		if (debug>0)
				if (x==dx && y==dy)
						printf("CALIC Returns: i=%d\n",i);
				
				return i;
}






//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

void lossless_DPCM_Encoder(char *in_PGM_filename_Ptr, int prediction_rule, char *out_filename_Ptr)
{
		int predict;				// current pixel prediction.
		int x,y;
		
		char histogram_file[256];	// histogram text file
		
		int  histogram[2000];		// The subscript 0..1999 is really for encoded values -1000..+999
		// YES, it's overkill. I want to capture anything that MAY be unexpectedly aberant.
		//      ...in which case there may be a bug in the code.
		//		I have very high confidence we'll see correctiness numbers.
		
		
		
		struct	PGM_Image pgmImage;	// PGM image a 1 byte greyscale image 0=Black, 255=White.
		
		int rule;					//
		rule = prediction_rule;		// Parameter 2 passed in here is a local copy of the global rule
		// local 'rule' can alternate between 4 and 5 in CALIC mode
		
		
		for (x=0; x<2000; x++) histogram[x]=0;							// clear the histogram totals
				
				
				printf("DPCM Encoding with rule %d...\n",prediction_rule);
		
		
		
		if (0 != load_PGM_Image(&pgmImage, in_PGM_filename_Ptr))		// load the PGM file.
		{																// ...problem with loading PGM file
		printf("Error loading PGM Image file.\n");
		exit(3);
		}
		printf("PGM file read successfully.\n");
		printf("Image is %d wide X %d high\n", pgmImage.width, pgmImage.height);
		
		
		
		
		FILE * afile = fileOpener(WRITE, out_filename_Ptr);				// Open the output file for writing
		if (afile == NULL)												// .. problem
		{	printf("Cannot open output file to save DPCM encoded file. Error opening file.\n");
		free_PGM_Image(&pgmImage);									// un-malloc PGM..no memory leaks
		exit(4);
		}
		printf("The result DPCM encoded file filename: %s\n", out_filename_Ptr);
		
		
		
		fprintf(afile, "# cs4481a - Assignment 4 - DPCM encoding. %s - 1st line=title, 2nd=width, 3rd=height, 4th=rule, 128 is the tacit initial predictor, then ASCII integer data\n", out_filename_Ptr);
		fprintf(afile, "%d\n%d\n%d\n", pgmImage.width, pgmImage.height, prediction_rule);
		
		for (y = 0; y < pgmImage.height; y++)							// Let's do all the pixels...are you ready?
				for (x = 0; x < pgmImage.width; x++)							// 
				{
						switch (rule)													// encode based on local rule
						{
								case 1:	predict= getcolor(&pgmImage, x, y, _W);		break;	// rule 1: West 
								case 2: predict= getcolor(&pgmImage, x, y, _N);		break;	// rule 2: North
								case 3: predict=(getcolor(&pgmImage, x, y, _W) / 2) + 		// rule 3: West/2 +
										(getcolor(&pgmImage, x, y, _N) / 2);break;	//               North/2
										
								case 4: predict= CALIC(&pgmImage, x, y, -999999999);		// CALIC-Binary encoding...currently
										if ((predict & 512) == 512) break;					// bit 9 set signals in Binary mode
												// if (rule != 5)
												rule = 5;											// ... trigger switch to continuous-tone
												fprintf(afile, "2\n");								// ...  with \n to help see it in editor
												histogram[2 + 1000]++;
										
										if (debug>0) if (y<=dy) printf("CONTINUOUS: To 5 at x %d  y %d \n", x, y);
										break;
										
								case 5:	predict = CALIC(&pgmImage, x, y, -999999999);		// CALIC-Continuous-tone encoding
										if ((predict & 512) == 512)							// bit 9 set means Binary
										{
												rule = 4;										// so, switch back to Binary mode
												if (debug>0) if (y<=dy) printf("BINARY:     To 4 at x %d  y %d \n", x, y);
										}
										if ((predict & 1024) == 1024)						// bit 10 set means switch back to Continuous-tone mode from Continuous-tone mode
										{
												fprintf(afile, "2\n");							// ...  with \n to help see it in editor
												histogram[2 + 1000]++;
										}
										
						}
						
						
						if (rule == 4)												// do not spit out error in CALIC-BINARY
						{
								fprintf(afile, "%d ", predict & 255);						// output is not error in CALIC binary
								histogram[(predict & 511) + 1000]++;
						}	
						else															// this is for CONTINUOUS-TONE mode
						{	
								int output;
								output= getcolor(&pgmImage, x, y, _THIS) - (predict & 255);	// output error: THIS pel MINUS prediction
								fprintf(afile, "%d ", output);								// possible ambiguous condition: when in continuous-tone and
								histogram[output + 1000]++;
						}
				}
				
				printf("Encoding complete.\n");
				fclose(afile);													// close output file
				free_PGM_Image(&pgmImage);										// un-malloc
				
				
				// === save histogram information ===
				
				sprintf (&histogram_file[0], "%s.Histogram.txt", &out_filename_Ptr[0]);
				
				afile = fileOpener(WRITE, histogram_file);						// Open the output file for writing
				if (afile == NULL)												// .. problem
				{	printf("Cannot open output file to save histogram. Error opening file.\nSaving Histogram information skipped.\n");
				return;
				}
				
				printf("The histogram file filename: %s\n", histogram_file);
				
				
				for (y=1999; y >= 0;   y--) if (histogram[y]>0) break;			// find the upper-lower limit of values > 0
						for (x=0   ; x <=1999; x++) if (histogram[x]>0) break;			// find the lower-upper limit of values > 0
								
								int i;
						for (i=x; i<=y; i++)
								fprintf(afile, "%d, %d\n", i-1000, histogram[i]);
						
						fclose(afile);
				printf("Histogram file saved.\n");
				
}



//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
void lossless_DPCM_Decoder(char *in_filename_Ptr, char *out_PGM_filename_Ptr) 
{
		int width=0, height=0, rule=0;
		int predict;
		int x, y;
		int f;
		int error=0;
		
		struct	PGM_Image pgmImage;											// PGM image a 1 byte greyscale image 0=Black, 255=White.
		
		
		printf("Decoding...\n");
		
		FILE * afile = fileOpener(READ, in_filename_Ptr);					// Open the output file for reading
		if (afile == NULL)													// .. problem
		{	printf("Cannot open input file to read DPCM encoded file. Error opening file.\n");
		free_PGM_Image(&pgmImage);										// un-malloc PGM..no memory leaks
		exit(4);
		}
		
		width  = geti(afile); 												// this is line 2
		height = geti(afile);												// this is line 3
		rule   = geti(afile);												// this is line 4
		
		
		
		
		printf("The encoded DPCM file filename: %s\n", in_filename_Ptr);	
		printf("Image is %d wide x %d height, DPCM rule %d used.\n", width, height, rule);
		
		
		if (0!= create_PGM_Image(&pgmImage, width, height, 255))			// allocate PGM memory
		{																	// ...problem with malloc
		printf("Error allocating memory for PGM Image.\n");
		fclose(afile);
		exit(3);
		}
		
		for (x=0; x< pgmImage.width; x++)									// fill with something. I chose 179
				for (y=0; y< pgmImage.height; y++)
						pgmImage.image[y][x]=179;
				
				
				x=0; y=0;
		while (y < pgmImage.height)
		{
				fscanf (afile, "%d", &f);										// get a datum from input stream
				
				switch (rule)													// decode based on local rule
				{
						case 1:	predict= getcolor(&pgmImage, x, y, _W);		break;	// rule 1: West 
						case 2: predict= getcolor(&pgmImage, x, y, _N);		break;	// rule 2: North
						case 3: predict=(getcolor(&pgmImage, x, y, _W) / 2) + 		// rule 3: West/2 +
								(getcolor(&pgmImage, x, y, _N) / 2);break;	//               North/2
								
						case 5: predict= CALIC(&pgmImage, x, y, f);
						if ((predict & 1024) == 1024)						// T=2 Continuous-tone, read next
						{
								fscanf(afile, "%d", &f); break;
						}
						
						if ((predict & 512) == 512)							// Switch to Binary mode
						{
								f=0; rule=4; break;
						}
						break;
						
						case 4: if (f==2)
						{
								rule=5;											// transition to Continuous-tone
								fscanf (afile, "%d", &f);
								predict= CALIC_CONTINUOUS_TONE(&pgmImage, x, y);// CALIC-Continuous..supposed to be
								break;
						}
						
						predict= CALIC(&pgmImage, x, y, f);					// CALIC-Binary...currently, still
						if ((predict & 512) == 512)							// bit 9 set signals in Binary mode
						{
								f=0;	
								break;											// no error
						}	
						
						// ERROR - should not ever be here!					// only show the first 10 errors, if any!
						if (error++ < 10) printf("ERROR DECODING CALIC BINARY MODE: Phase error: %d %d %d.\n", f, x, y);							
				}
				
				pgmImage.image[y][x] = (predict + f) & 255;						// save pixel 8 bits only
				
				x++;
				if (x >= pgmImage.width)
				{ x=0; y++;}
		}		
		
		
		
		printf("The decoded file will be saved as a RAW PGM.\nThe filename is: %s\n",out_PGM_filename_Ptr);
		save_PGM_Image(&pgmImage, out_PGM_filename_Ptr, true);
		
		printf("Decoding complete.\n");
		
		fclose(afile);														// close output file
		free_PGM_Image(&pgmImage);											// un-malloc
		
}




void intro(){
		printf("\n\t*******************************\n");
		printf("\t*** Eric Robinson - Assign4 ***\n");
		printf("\t*** Student #:    250598791 ***\n");
		printf("\t*** Account:       erobin25 ***\n");
		printf("\t*******************************\n\n");
}

int main(int argc, char** argv){
		intro();
		
		int		rule;				// This is fed by the argument line
		char	filename[256];		// result output filename
		
		if (argc != 3)
		{
				printf("This program requires two arguments.\n");
				printf("    First  argument: The PGM file to read in and DPCM encode.\n");
				printf("    Second argument: The Prediction Rule: 1=West, 2=North, 3= W/2 + N/2, 4=CALIC, 5=Decode\n");
				printf("    The output DPCM encoded file has the same filename with a (dot).DPCM suffix added to the filename\n");
				exit(1);
		}
		
		rule = atoi(argv[2]);
		if ((rule < 1) || (rule > 6))								// determine the RULE from the arg line
		{
				printf("Error specifying the prediction rule. It can only be between 1 and 4\n");
				printf("...the values are: 1=West, 2=North, 3= W/2 + N/2, 4=CALIC, 5=Decode\n");
				exit(2);
		}
		
		
		printf("The prediction rule is %d: ", rule);
		switch (rule)
		{
				case 1: printf("West"); 						break;
				case 2: printf("North");						break;
				case 3: printf("(West * 0.5) + (North * 0.5)");	break;
				case 4: printf("CALIC");						break;
				case 5: printf("Decode");
		}
		printf("\n");
		
		if(rule <= 4){
				sprintf (&filename[0], "%s_DPCM_Rule_%1d", argv[1], rule);	// calc the output filename
				lossless_DPCM_Encoder(argv[1], rule, &filename[0]);
		}
		else if(rule == 5){
				
				/*
				if (0 != load_PGM_Image(&pgmImageDEBUG, argv[1]))			// load the PGM file.
				{															// ...problem with loading PGM file
						printf("Error loading Decoder Verifier PGM Image file.\n");
						exit(3);
				}
				
				printf("Decoder Verifier PGM file read successfully.\n");
				printf("Decoder Verifier Image is %d wide X %d high\n", pgmImageDEBUG.width, pgmImageDEBUG.height);
				*/
				
				char result[100];											// only for the decoder on the next line
				sprintf (&result[0], "%s.Decoder_only.pgm", argv[1]);		// calc the newly decoded PGM output filename
				
				lossless_DPCM_Decoder(argv[1], &result[0]);
				
		}
		
		return 0;
}
